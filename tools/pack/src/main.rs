// Really could be sh script, wanted to try it rust though,
// May move this to build.rs so I can intergrate with watch
// see vite-plugin-wasm for more info as well
use std::{fs, io::Write};
use xshell::cmd;

#[allow(dead_code)]
enum Mode {
    Release,
    Profile,
    Debug,
}

fn main() {
    // TODO: make these args with defaults?
    let target = "wasm32-unknown-unknown";
    let wasmbind_out_dir = "./frontend/public/wasm";
    let crates_file_path = "./frontend/src/wasm.ts";
    let crates_path = "./crates";

    // Cargo build options



    // Build list of crates we want to build
    let mut crates: Vec<String> = vec![];
    for entry_result in fs::read_dir(crates_path).unwrap() {
        let entry = entry_result.unwrap();
        let path = entry.path();
        let name = path.file_name().unwrap().to_str().unwrap();
        if path.is_dir() {
            crates.push(name.to_string());
        }
    }

    for name in &crates {
        // Build each crate
        // https://doc.rust-lang.org/cargo/commands/cargo-build.html
        cmd!("cargo build --package {name} --release --target={target}")
            .run()
            .expect("Build failed");

        // https://rustwasm.github.io/wasm-bindgen/reference/cli.html#the-wasm-bindgen-command-line-interface
        // https://rustwasm.github.io/wasm-bindgen/reference/deployment.html
        cmd!("wasm-bindgen target/{target}/release/{name}.wasm --target web --out-dir {wasmbind_out_dir}/{name} --out-name index --debug")
            .run().expect("Build failed, be sure wasm-bindgen-cli version match");

        //cmd!(" wasm-opt {wasmbind_out_dir}/{name}/index_bg.wasm -O2 --dce --output {wasmbind_out_dir}/{name}/index_bg.wasm")
        //    .run().expect("Build failed, be sure wasm-bindgen-cli version match");
        //   
    }

    // Save list of crates for use in vue and vite
    let file_contents = format!(
        r#"
        // generated by 'pack'
        export const wasm_crates : string[] = {};
        "#,
        serde_json::to_string(&crates).unwrap()
    );

    let mut crates_file = fs::File::create(crates_file_path)
        .expect("Error creating crates file");
    crates_file
        .write_all(file_contents.as_bytes())
        .expect("Error writing crates file");

    // useful command
    println!(" Try `cargo watch -i \"frontend/**\" -c -x \"run -p pack\"` for hot reloading.")
}
